@using Shared=BlazorCMS.Shared
@implements IDisposable
@inject Shared.AppState AppStateStore
@inject Shared.ISiteConfiguration SiteConfiguration

<NotificationMessage @ref="@_notificationMessage" />
@if (!String.IsNullOrEmpty(_article.ArticleText))
{
    @((MarkupString)_article.ArticleText)
}
else
{
    @ChildContent
}
EditMode = @EditMode

@code {
    [Parameter]
    public string ArticleKey { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public bool EditMode { get; set; }
    private NotificationMessage _notificationMessage;

    private Shared.Article _article = new Shared.Article();

    protected override async Task OnInitializedAsync()
    {
        AppStateStore.OnChange += ReadArticle;
        ReadArticle();
    }
    private async void ReadArticle()
    {
        try
        {
            if (AppStateStore.ArticleCache.ContainsKey(ArticleKey))
            {
                _article = AppStateStore.ArticleCache[ArticleKey];
            }
            else
            {
                _article = await SiteConfiguration.GetArticleByKeyAsync(ArticleKey);
                AppStateStore.ArticleCache[ArticleKey] = _article;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
             _notificationMessage.ShowError($"Fehler: {ex.Message}");
        }
    }
    public void Dispose()
    {
        AppStateStore.OnChange -= ReadArticle;
    }
}
