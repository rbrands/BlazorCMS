@using Blazored.TextEditor
@using Shared=BlazorCMS.Shared
@implements IDisposable
@inject Shared.AppState AppStateStore
@inject Shared.ISiteConfiguration SiteConfiguration

<NotificationMessage @ref="@_notificationMessage" />
@if (!EditMode)
{
    @if (!String.IsNullOrEmpty(_article?.ArticleText))
    {
        @((MarkupString)_article.ArticleText)
    }
    else
    {
        @ChildContent
    }
}
else
{
   <BlazoredTextEditor @ref="_htmlArticle" Placeholder="Artikel-Text">
        <ToolbarContent>
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
            </span>
            <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
            </span>
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
            </span>
            <span class="ql-formats">
                <button class="ql-link"></button>
            </span>
        </ToolbarContent>
        <EditorContent>
            @if (null != _article?.ArticleText)
            {@((MarkupString)_article.ArticleText)}
        </EditorContent>
    </BlazoredTextEditor>
    <button class="btn btn-sm btn-outline-secondary" role="button" @onclick="@(() => SaveArticle())"><span class="oi oi-check" title="Speichern"></span></button>
    <button class="btn btn-sm btn-outline-secondary" role="button" @onclick="@(() => Cancel())"><span class="oi oi-x" title="Abbrechen"></span></button>

}

@code {
    [Parameter]
    public string ArticleKey { get; set; } = "DefaultArticle";
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public bool EditMode { get; set; }
    private NotificationMessage? _notificationMessage;
    private BlazoredTextEditor? _htmlArticle;
    private Shared.Article? _article = new Shared.Article();

    protected override async Task OnInitializedAsync()
    {
        AppStateStore.OnChange += ReadArticle;
        await ReadArticleAsync();
    }
    private async void ReadArticle()
    {
        try
        {
            if (AppStateStore.ArticleCache.ContainsKey(ArticleKey))
            {
                _article = AppStateStore.ArticleCache[ArticleKey];
            }
            else
            {
                _article = await SiteConfiguration.GetArticleByKeyAsync(ArticleKey);
                AppStateStore.ArticleCache[ArticleKey] = _article;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            if (null != _notificationMessage)
            {
                _notificationMessage.ShowError($"Fehler: {ex.Message}");
            }
        }
    }
    private async Task ReadArticleAsync()
    {
        try
        {
            if (AppStateStore.ArticleCache.ContainsKey(ArticleKey))
            {
                _article = AppStateStore.ArticleCache[ArticleKey];
            }
            else
            {
                _article = await SiteConfiguration.GetArticleByKeyAsync(ArticleKey);
                AppStateStore.ArticleCache[ArticleKey] = _article;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            if (null != _notificationMessage)
            {
                _notificationMessage.ShowError($"Fehler: {ex.Message}");
            }
        }
    }

    private async Task SaveArticle()
    {
        try
        {
            if (null == _article)
            {
                _article = new Shared.Article();
            }
            if (null != _htmlArticle)
            {
                _article.ArticleText = await _htmlArticle.GetHTML();
            }
            _article.ArticleKey = ArticleKey;
            await SiteConfiguration.WriteArticleAsync(_article);
            EditMode = false;
        }
        catch (Exception ex)
        {
            if (null != _notificationMessage)
            {
                _notificationMessage.ShowError($"Fehler: {ex.Message}");
            }
        }
    }
    private void Cancel()
    {
        EditMode = false;
    }


    public void Dispose()
    {
        AppStateStore.OnChange -= ReadArticle;
    }
}
